@startuml
title Scene Integration System

class SceneLoader {
  -scenePath: String
  -scene: Scene
  -camera: Camera
  -renderer: Renderer
  +loadScene(path: String): void
  +parseSceneData(): void
  +initializeScene(): void
}

class Renderer {
  -canvas: HTMLCanvasElement
  +render(scene: Scene, camera: Camera): void
}

class WebGLRenderer {
  +render(scene, camera)
  +setSize(width, height)
}

class ModelImporter {
  -modelPath: String
  -loadedModels: List<Object3D>
  +loadModels(path: String): List<Object3D>
}

class MaterialHandler {
  -texturePath: String
  +applyMaterials(models: List<Object3D>): void
}

class LightingManager {
  -lights: List<Light>
  +setupDefaultLighting(): void
}

class EnvironmentHandler {
  -hdriPath: String
  +applyHDRI(path: String): void
}

class OrbitControlsHandler <<optional>> {
  -controls: OrbitControls
  +initialize(camera: Camera, canvas: HTMLCanvasElement): OrbitControls
  +update(): void
}

class RaycasterHandler <<optional>> {
  -raycaster: Raycaster
  -mouse: Vector2
  +detectIntersections(event: MouseEvent, objects: List<Object3D>): List<Intersection>
}

ModelImporter "0..*" --* "1" SceneLoader

SceneLoader *-- Renderer
SceneLoader *-- MaterialHandler
SceneLoader *-- LightingManager
SceneLoader *-- EnvironmentHandler

SceneLoader ..> OrbitControlsHandler : <<optional>>
SceneLoader ..> RaycasterHandler : <<optional>>

Renderer ..> WebGLRenderer : uses

@enduml
