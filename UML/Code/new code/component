@startuml
title Component Diagram: Scene Integration System

left to right direction
skinparam componentStyle rectangle

' Top-Level: Developer View
package "Frontend Developer View" {
  [Developer UI]
  [SceneLoader]
  [OrbitControlsHandler]
  [RaycasterHandler]
}

' Middle Layer: Scene Processing System
package "Scene Processing System" {
  [Renderer]
  [LightingManager]
  [MaterialHandler]
  [EnvironmentHandler]
  [ModelImporter]
}

' Bottom Layer: Asset Sources
package "Asset Sources" {
  [File System]
}

' External Library
component [Three.js] <<external>>
component [WebGLRenderer] <<external>>

' -------------------------------
' Relationships
' -------------------------------

' UI Flow
[Developer UI] --> [SceneLoader]
[Developer UI] --> [OrbitControlsHandler] : <<optional>>
[Developer UI] --> [RaycasterHandler] : <<optional>>

' SceneLoader orchestrates processing
[SceneLoader] --> [Renderer]
[SceneLoader] --> [LightingManager]
[SceneLoader] --> [MaterialHandler]
[SceneLoader] --> [EnvironmentHandler]
[SceneLoader] --> [ModelImporter]
[SceneLoader] --> [OrbitControlsHandler]
[SceneLoader] --> [RaycasterHandler]

' Assets feed into the system
[File System] -up-> [ModelImporter] : provides models
[File System] -up-> [MaterialHandler] : provides textures
[File System] -up-> [EnvironmentHandler] : provides HDRI

' External libraries
[Renderer] ..> [WebGLRenderer] : renders via
[SceneLoader] ..> [Three.js] : uses
[Developer UI] ..> [Three.js] : interacts via canvas

@enduml
